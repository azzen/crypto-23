from Crypto.Signature import pss
from Crypto.Hash import SHA256
from Crypto.PublicKey.RSA import import_key, RsaKey, construct
from base64 import b64decode, b64encode
from sage.all import *


def verify(message: bytes, signature: bytes, public_key: RsaKey):
    verifier = pss.new(public_key)
    h = SHA256.new(message)
    try:
        verifier.verify(h, signature)
        print("The signature is authentic")
    except (ValueError, TypeError):
        print("The signature is not authentic")


pk2 = import_key("""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0atGnCqRv8pKkTRni3wr
3fKFvtkJJWdtBu86iv/bpAMKGPFbIjNgH3oy1rCPKEoMeeqKFuX7kYQfAFejrzqh
1PNXgClwdN4dwEcvl6Vdy1qQDyvWWTJrmD6BSUaxKGre7zXG7hWIt0ua7Q+LW+fh
uu6210HvdpitHeVfe2dEEcRHJvIqpefvHZ6YtArlSZoHyIhGRT3lJ7pAfiN1+x7A
4wcxN8Ku2rxvSg4451veZik4sQvanz2s4C6oK2oK/5iaYrgTIOknOzCSgumREfLl
n5Okj+55j8j/p14HE4Iy7mYzxspmAS8JU4LPI7MRpLGNp7jZoipbXn7CbRv13wyi
SQIDAQAB
-----END PUBLIC KEY-----""")
                 
m2 = "You are allowed to land at Geneva airport on 02.02.2022 at 13h55"
s2 = "E2yHtSzFiti0+WLCKggl7Hpp5/2qqFnNwfV/PMLoj71/E7Kiqrfl5f9bxFoY1W917EEtmy1FMhcSrZCW2f17IN/Tzeh5yNGauAct1BUr9z7Ea9mIxJ8M9pO7PJovqts3q/XA4HkhMtDm2vsNADH1/My6tXk/X+MYOHU2Wy3wh2Ni6w9CZXEUOEr2Yroi+9aJyJkiJjffkiGRicsrHBcJ8h3/yA5127lSE8Nn5HAWG0F33p1s77MdtrRqLqmoVVETJBmOv5aiJljc3Agl4NjEtq4r1D6lp0Iq8+M+nfB7kZJm8omEWV6kq8JEgwqgDbFihAJkXzuOLruvKV40HOC+Cw=="
r2 = [6760187096039391163394338680221658538487233723353739353490637044946491677630812911747252118770262751984975949743719341398636614231741166784586368234760278842047159647526077043248018448934440802013654047858748821794908074422980799728677266475258599653193452042148763468666060114965681699727691075491234238951061086869427817606966156437353549017313628289098257158847809648200195276789443260260932138535041174455684991108294838099811072399138252532777907141634630365468966619853079076096566674144842056271402373196171377021338773664036652070781839233178981384767094250608124867752013874917805045183111760717456684264106, 11916715641025264984778398957463185481705689341061626942491797604513432490434572796415168735647681421727541079249770145765780817550679163697217386336847866295403069673586848957973777015397693272758203314463448649285217169920324638441263593418091497536427787709533585714543076747492536065706464731382117984548414526529799320099579368326267173302042785407051715301212262864088997919677308568000192901739790418419467114891839329673113187050221566901373392464342358369558820830988354204487689655335667009334978594208888914623283777020777182690548294692779384629192494150974951354834593294077596012044928313732746806106807, 14551549351763918628144990500789055212566224275480118587777003933671315816550666001148574094563882557690176825744451381838263329722946094461954868587016925226463074382806786120403118239806565982588122193492247606117134387057936066827277781293364990735094574530257835587179141089429359235804087880187369262934934203411889492894800088470804059997828319226691219933029160886342871941019793402393950887672741691148448123169971329247792942070898806455235559811031003788265211742716283105290681147106060706121048876466938298610991875755296240207790436264388014237318203803512242997826846764458607660737398007080505667979154, 19708077896749792449529050778030582155784679893188006176778164493238256629354425885816490711441301227432741955250502186205407533041884091374585886689104512679818984408867558035128876806269818453332671460096947433607443482555279905539864108236197888618328910197642657833056157721956213601782861536078253008532287643072260995387413300359717684282557476344644678075393614102231674583907658710133211650877490935112230246953515820821095056721982120823831045133738731792355065953851558233681804128296885659184625097479655836212936879112036770827556891723988417481743603703879069484909426183618398627599214560095795789821855]

verify(bytes(m2, 'utf8'), b64decode(s2), pk2)

Fn = Integers(pk2.n)

pairs = [(r2[0], r2[3]), (r2[1], r2[2])] # r1 = -r4, r2 = -r3
kp = Fn(r2[0] + r2[2])

# We can imagine our roots in Z/pZ x Z/qZ

# r1 + r4 = 0 since f(-x_p, -x_q) + f(x_p, x_q) = f(0, 0) = 0
# r2 + r3 = 0 since f(-x_p, x_q) + f(x_p, -x_q) = f(0, 0) = 0

# r1^2 = f(x_p, x_q)f(x_p, x_q) = f(x_px_p, x_qx_q) = f(x, x) = x
# r2^2 = f(x_p, -x_q)f(x_p, -x_q) = f(x_px_p, x_qx_q) = f(x, x) = x

# r3^2 = rf(-x_p, x_q)f(-x_p, x_q) = f(x_px_p, x_qx_q) = f(x, x) = x
# r4^2 = f(-x_p, -x_q)f(-x_p, -x_q) = f(x_px_p, x_qx_q) = f(x, x) = x

# If we compute r1 + r3 : f(x_p, x_q) + f(-x_p, x_q) = f(0, 2x_q) <- this is a multiple of p 
# but not q as we have 0 in Z/pZ and not 0 in Z/qZ

Kp = Fn(r2[0] + r2[2]) # r1 + r3 = kp
n = pk2.n
p = gcd(Kp, n).lift()
q = n / p
print(p * q  == n)
d = inverse_mod(pk2.e, (p-1) * (q-1))
k = construct((n, pk2.e, int(d)))

m = b"You are allowed to land at Zurich airport on 02.02.2022 at 13h55"
h = SHA256.new(m)
print(k)
sig = pss.new(k).sign(h)
verify(m, sig, pk2)